// SPDX-License-Identifier: MIT
pragma solidity >=0.6.12 <0.9.0;

contract EventContract {
  struct Event{
    address organizer;
    string name;
    uint date;
    uint price;
    uint ticket;
    uint ticketRemain;
  }
 
 mapping(uint=>Event) public events;
 mapping(address=>mapping (uint=>uint)) public tickets;
 uint public nextId;

 function createEvent(string memory name, uint date,uint price, uint ticketCount) external {
  require(date>block.timestamp,"You can organize event for future date");
  require(ticketCount>0,"You can organize event only if you can create more than 0 ticket");

  events[nextId]=Event(msg.sender, name, date, price, ticketCount, ticketCount);
  nextId++;
 }

 function buyTicket(uint id, uint quantity) external payable{
  require(event[id].date!=0,'This Events does not exist');
  require(event[id].date>block.timestamp,"Event is already occured");
   Event storage _event = events[id];
   require(msg.value==(_event.price*quantity),"Ethere is not enough");
   require(_event.ticketRemain>=quantity,"Not enough tickets");
   _event.ticketRemain-=quantity;
   tickets[msg.sender][id]+=quantity;

 }
}
